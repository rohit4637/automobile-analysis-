function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { arc } from 'd3-shape';
import { ribbon, chord } from 'd3-chord';
import { scaleOrdinal } from 'd3-scale';
import { range, descending } from 'd3-array';
import Svg from './Svg';
import Groups from './Groups';
import Ribbons from './Ribbons';
import './main.css';

var ChordDiagram = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ChordDiagram, _Component);

  function ChordDiagram(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      hoverPersist: false,
      mouseOverGroup: null,
      mouseOverRibbon: null
    });

    _this.clearHover = _this.clearHover.bind(_assertThisInitialized(_this));
    _this.setHoverPersist = _this.setHoverPersist.bind(_assertThisInitialized(_this));
    _this.setMouseOverGroup = _this.setMouseOverGroup.bind(_assertThisInitialized(_this));
    _this.setMouseOverRibbon = _this.setMouseOverRibbon.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = ChordDiagram.prototype;

  _proto.clearHover = function clearHover() {
    this.setState({
      hoverPersist: false,
      mouseOverGroup: null,
      mouseOverRibbon: null
    });
  };

  _proto.setHoverPersist = function setHoverPersist(hoverPersist) {
    if (this.props.persistHoverOnClick) {
      this.setState({
        hoverPersist: hoverPersist
      });
    }
  };

  _proto.setMouseOverGroup = function setMouseOverGroup(mouseOverGroup) {
    this.setState({
      mouseOverGroup: mouseOverGroup
    });
  };

  _proto.setMouseOverRibbon = function setMouseOverRibbon(mouseOverRibbon) {
    this.setState({
      mouseOverRibbon: mouseOverRibbon
    });
  };

  _proto.render = function render() {
    var _this$props = this.props,
        matrix = _this$props.matrix,
        componentId = _this$props.componentId,
        width = _this$props.width,
        height = _this$props.height,
        style = _this$props.style,
        className = _this$props.className,
        groupLabels = _this$props.groupLabels,
        groupColors = _this$props.groupColors,
        groupOnClick = _this$props.groupOnClick,
        padAngle = _this$props.padAngle,
        sortGroups = _this$props.sortGroups,
        sortSubgroups = _this$props.sortSubgroups,
        sortChords = _this$props.sortChords,
        labelColors = _this$props.labelColors,
        disableHover = _this$props.disableHover,
        disableGroupHover = _this$props.disableGroupHover,
        disableRibbonHover = _this$props.disableRibbonHover,
        strokeWidth = _this$props.strokeWidth,
        resizeWithWindow = _this$props.resizeWithWindow,
        ribbonOnClick = _this$props.ribbonOnClick,
        blurOnHover = _this$props.blurOnHover,
        ribbonOpacity = _this$props.ribbonOpacity,
        ribbonBlurOpacity = _this$props.ribbonBlurOpacity,
        persistHoverOnClick = _this$props.persistHoverOnClick,
        svgOnClick = _this$props.svgOnClick;
    var outerRadius = this.props.outerRadius || Math.min(width, height) * 0.5 - 40;
    var innerRadius = this.props.innerRadius || outerRadius - 30;
    var d3Chord = chord().padAngle(padAngle).sortGroups(sortGroups).sortSubgroups(sortSubgroups).sortChords(sortChords);
    var chords = d3Chord(matrix);
    var d3Arc = arc().innerRadius(innerRadius).outerRadius(outerRadius);
    var d3Ribbon = ribbon().radius(innerRadius);
    var color = scaleOrdinal().domain(range(groupColors.length)).range(groupColors);
    return /*#__PURE__*/React.createElement(Svg, {
      width: width,
      height: height,
      style: style,
      className: className,
      clearHover: this.clearHover,
      resizeWithWindow: resizeWithWindow,
      onClick: svgOnClick
    }, /*#__PURE__*/React.createElement(Groups, {
      componentId: componentId,
      chords: chords,
      color: color,
      arc: d3Arc,
      outerRadius: outerRadius,
      setMouseOverGroup: this.setMouseOverGroup,
      groupLabels: groupLabels,
      labelColors: labelColors,
      disableHover: disableHover || disableGroupHover,
      hoverPersist: this.state.hoverPersist,
      setHoverPersist: this.setHoverPersist,
      onClick: groupOnClick
    }), /*#__PURE__*/React.createElement(Ribbons, {
      chords: chords,
      color: color,
      disableHover: disableHover || disableRibbonHover,
      ribbon: d3Ribbon,
      setMouseOverRibbon: this.setMouseOverRibbon,
      mouseOverGroup: this.state.mouseOverGroup,
      mouseOverRibbon: this.state.mouseOverRibbon,
      strokeWidth: strokeWidth,
      hoverPersist: this.state.hoverPersist,
      setHoverPersist: this.setHoverPersist,
      onClick: ribbonOnClick,
      blurOnHover: blurOnHover,
      ribbonOpacity: ribbonOpacity,
      ribbonBlurOpacity: ribbonBlurOpacity
    }));
  };

  return ChordDiagram;
}(Component);

_defineProperty(ChordDiagram, "defaultProps", {
  matrix: [],
  componentId: 1,
  width: 700,
  height: 700,
  style: {},
  className: '',
  outerRadius: null,
  innerRadius: null,
  groupLabels: [],
  groupColors: [],
  groupOnClick: null,
  padAngle: 0.05,
  sortGroups: null,
  sortSubgroups: descending,
  sortChords: null,
  labelColors: ['#000000'],
  disableHover: false,
  disableGroupHover: false,
  disableRibbonHover: true,
  strokeWidth: 1,
  resizeWithWindow: false,
  ribbonOnClick: null,
  blurOnHover: false,
  ribbonOpacity: '0.67',
  ribbonHoverOpacity: '0.2',
  persistHoverOnClick: false,
  svgOnClick: null
});

export { ChordDiagram as default };
ChordDiagram.propTypes = process.env.NODE_ENV !== "production" ? {
  matrix: PropTypes.array.isRequired,
  componentId: PropTypes.number.isRequired,
  width: PropTypes.number,
  height: PropTypes.number,
  style: PropTypes.object,
  className: PropTypes.string,
  outerRadius: PropTypes.number,
  innerRadius: PropTypes.number,
  groupLabels: PropTypes.array,
  groupColors: PropTypes.array,
  padAngle: PropTypes.number,
  sortGroups: PropTypes.func,
  sortSubgroups: PropTypes.func,
  sortChords: PropTypes.func,
  labelColors: PropTypes.array,
  disableHover: PropTypes.bool,
  disableGroupHover: PropTypes.bool,
  disableRibbonHover: PropTypes.bool,
  strokeWidth: PropTypes.number,
  resizeWithWindow: PropTypes.bool,
  groupOnClick: PropTypes.func,
  ribbonOnClick: PropTypes.func,
  svgOnClick: PropTypes.func,
  blurOnHover: PropTypes.bool,
  ribbonOpacity: PropTypes.string,
  ribbonHoverOpacity: PropTypes.string,
  persistHoverOnClick: PropTypes.bool
} : {};