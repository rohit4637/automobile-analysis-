import React from 'react';
import PropTypes from 'prop-types';
import { rgb } from 'd3-color';
import { isHiddenRibbon } from './utils';

var Ribbons = function Ribbons(_ref) {
  var chords = _ref.chords,
      color = _ref.color,
      disableHover = _ref.disableHover,
      ribbon = _ref.ribbon,
      setMouseOverRibbon = _ref.setMouseOverRibbon,
      mouseOverGroup = _ref.mouseOverGroup,
      mouseOverRibbon = _ref.mouseOverRibbon,
      hoverPersist = _ref.hoverPersist,
      setHoverPersist = _ref.setHoverPersist,
      _onClick = _ref.onClick,
      strokeWidth = _ref.strokeWidth,
      blurOnHover = _ref.blurOnHover,
      ribbonOpacity = _ref.ribbonOpacity,
      ribbonBlurOpacity = _ref.ribbonBlurOpacity;
  return /*#__PURE__*/React.createElement("g", {
    className: "ribbons",
    fillOpacity: ribbonOpacity
  }, chords.map(function (chord, chordIndex) {
    var hidden = isHiddenRibbon(mouseOverGroup, chord.source.index, chord.target.index) || isHiddenRibbon(mouseOverRibbon, chordIndex, null);
    var style = blurOnHover ? {
      fillOpacity: "" + (hidden ? ribbonBlurOpacity : ribbonOpacity)
    } : {
      display: "" + (hidden ? 'none' : 'block'),
      fillOpacity: ribbonOpacity
    };
    return /*#__PURE__*/React.createElement("path", {
      key: chordIndex,
      style: style,
      fill: color(chord.target.index),
      stroke: "" + rgb(color(chord.target.index)).darker(),
      strokeWidth: strokeWidth,
      d: "" + ribbon({
        source: chord.source,
        target: chord.target
      }),
      onClick: function onClick() {
        setHoverPersist(!hoverPersist);
        _onClick && _onClick(chordIndex);
      },
      onMouseOver: !disableHover && !hoverPersist ? function () {
        return setMouseOverRibbon(chordIndex);
      } : null,
      onMouseOut: !disableHover && !hoverPersist ? function () {
        return setMouseOverRibbon(null);
      } : null
    });
  }));
};

Ribbons.propTypes = process.env.NODE_ENV !== "production" ? {
  chords: PropTypes.array.isRequired,
  color: PropTypes.func.isRequired,
  ribbon: PropTypes.func.isRequired,
  setMouseOverRibbon: PropTypes.func.isRequired,
  mouseOverGroup: PropTypes.number,
  mouseOverRibbon: PropTypes.number,
  onClick: PropTypes.func,
  strokeWidth: PropTypes.number,
  disableHover: PropTypes.bool,
  blurOnHover: PropTypes.bool
} : {};
export default Ribbons;